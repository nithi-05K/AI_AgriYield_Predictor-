# -*- coding: utf-8 -*-
"""Copy of infosys prepro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZL5bCpo0lPX4fcQt5994wZZmRB1UV9yQ
"""

# ===============================================
#  Step 1: Import Required Libraries
# ===============================================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from google.colab import files

# To display all columns
pd.set_option('display.max_columns', None)

# ===============================================
#  Step 2: Upload Dataset
# ===============================================
print(" Please upload your dataset (CSV file)")
uploaded = files.upload()

for filename in uploaded.keys():
    dataset_path = filename
    print(f" File '{filename}' uploaded successfully!")

# ===============================================
#  Step 3: Load Dataset
# ===============================================
df = pd.read_csv(dataset_path)
print("\n Dataset Loaded Successfully!")
print(f" Total Rows: {df.shape[0]}, Columns: {df.shape[1]}")
print("\n Column Names:\n", df.columns.tolist())

# Display first few rows
display(df.head())

# ===============================================
#  Step 4: Basic Dataset Info
# ===============================================
print("\n Dataset Info:")
df.info()

print("\n Summary Statistics (Numerical):")
display(df.describe())

print("\n Summary Statistics (Categorical):")
display(df.describe(include=['object']))

# ===============================================
#  Step 5: Check for Missing & Duplicate Values
# ===============================================
print("\n Missing Values Check:")
missing_values = df.isnull().sum()
print(missing_values[missing_values > 0] if missing_values.sum() > 0 else " No Missing Values Found")

# Handle missing values
num_cols = df.select_dtypes(include=['int64', 'float64']).columns
cat_cols = df.select_dtypes(include=['object']).columns

for col in num_cols:
    df[col].fillna(df[col].median(), inplace=True)

for col in cat_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)

print("\n Missing Values Filled Successfully!")

# Remove duplicates
duplicates = df.duplicated().sum()
if duplicates > 0:
    df.drop_duplicates(inplace=True)
    print(f" Removed {duplicates} duplicate rows.")
else:
    print(" No Duplicate Rows Found.")

# ===============================================
# Step 6: Outlier Detection (Optional but Useful)
# ===============================================
print("\n Checking for Outliers (using IQR method)...")
for col in num_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    outliers = ((df[col] < (Q1 - 1.5 * IQR)) | (df[col] > (Q3 + 1.5 * IQR))).sum()
    print(f"{col}: {outliers} potential outliers")

# ===============================================
#  Step 7: Encode Categorical Variables
# ===============================================
le = LabelEncoder()
for col in cat_cols:
    df[col] = le.fit_transform(df[col])

print("\n All Categorical Columns Encoded Successfully!")

# ===============================================
# 📏 Step 8: Feature Scaling
# ===============================================
scaler = StandardScaler()
df[num_cols] = scaler.fit_transform(df[num_cols])
print(" All Numerical Columns Scaled Successfully!")

# ===============================================
#  Step 9: Correlation Heatmap (Quick EDA)
# ===============================================
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), cmap='coolwarm', annot=False)
plt.title(" Correlation Heatmap")
plt.show()

# ===============================================
#  Step 10: Visualize Distributions
# ===============================================
num_features = df.select_dtypes(include=[np.number]).columns.tolist()
df[num_features].hist(figsize=(15, 10), bins=20)
plt.suptitle(" Feature Distributions", size=16)
plt.show()

# ===============================================
#  Step 11: Save the Preprocessed Dataset
# ===============================================
output_file = "preprocessed_dataset.csv"
df.to_csv(output_file, index=False)
print(f"\n Preprocessed dataset saved as '{output_file}'")

# ===============================================
#  Step 12: Final Verification
# ===============================================
print("\n Final Dataset Summary:")
print(f"Rows: {df.shape[0]}, Columns: {df.shape[1]}")
print("\n Data preprocessing complete. You can now move to EDA or Model Training.")

from google.colab import files
files.download("preprocessed_dataset.csv")

# ===============================================
# Step 1: Import Libraries
# ===============================================
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

pd.set_option('display.max_columns', None)

# ===============================================
# Step 2: Upload Preprocessed Dataset
# ===============================================
print(" Upload your preprocessed dataset (CSV file)")
uploaded = files.upload()

for filename in uploaded.keys():
    preprocessed_file = filename
    print(f"File '{filename}' uploaded successfully!")

# ===============================================
# Step 3: Load Dataset
# ===============================================
df = pd.read_csv(preprocessed_file)

print("\n Dataset Overview:")
print(f"Total Rows: {df.shape[0]}, Columns: {df.shape[1]}")
display(df.head())

print("\n Dataset Info:")
df.info()

print("\n Summary Statistics (All Numeric Columns):")
display(df.describe())

# ===============================================
# Step 4: Missing Values Check
# ===============================================
missing = df.isnull().sum()
print("\n Missing Values Check:")
print(missing[missing > 0] if missing.sum() > 0 else " No Missing Values Found")

# ===============================================
# Step 5: Feature Distributions
# ===============================================
numeric_features = df.select_dtypes(include=['int64','float64']).columns

# Histogram + Density Plot
for col in numeric_features:
    plt.figure(figsize=(8,4))
    sns.histplot(df[col], kde=True, bins=20, color='skyblue')
    plt.title(f"Distribution of {col}")
    plt.xlabel(col)
    plt.ylabel("Frequency")
    plt.show()

# ===============================================
# Step 6: Correlation Heatmap
# ===============================================
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title(" Correlation Heatmap")
plt.show()

# ===============================================
# Step 7: Pairwise Scatter Plots for Numeric Features
# ===============================================
# Use only first 6 numeric features if too many columns
subset_features = numeric_features[:6] if len(numeric_features) > 6 else numeric_features

sns.pairplot(df[subset_features], diag_kind='kde', corner=True)
plt.suptitle(" Pairwise Feature Comparisons", y=1.02)
plt.show()

# ===============================================
# Step 8: Comparison Graphs for Key Features
# ===============================================
# Example: Scatter plot (replace with actual features from your dataset)
if 'Rainfall' in df.columns and 'Yield' in df.columns:
    plt.figure(figsize=(8,4))
    sns.scatterplot(data=df, x='Rainfall', y='Yield', hue='Yield', palette='viridis', s=80)
    plt.title("Rainfall vs Yield")
    plt.show()

# Example: Boxplot for numeric column grouped by encoded categorical column
# Pick first int64 column as categorical example
cat_features = [col for col in numeric_features if col in df.columns]
if len(cat_features) > 0:
    example_cat = cat_features[0]
    example_num = numeric_features[0]
    plt.figure(figsize=(8,4))
    sns.boxplot(x=example_cat, y=example_num, data=df)
    plt.title(f"{example_num} distribution across {example_cat}")
    plt.show()

